<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>System Shock poate fi trăit printr-o perspectivă first-person, într-un decor tridimensional (3D). Jocul are loc într-o stație spațială alcătuită pe mai multe nivele, în care jucătorul explorează, se luptă cu inamici şi rezolvă puzzle-uri. Progresul nu este liniar, iar designul este proiectat să permită desfăşurarea în voie a mecanicilor de joc. La fel ca în Ultima Underworld, jucătorul foloseşte un mouse cu un cursor liber în mişcare pentru a încărca şi folosi armele disponibile, pentru a interacționa cu obiectele, respectiv pentru a manipula interfața display-ul heads-up (HUD). Vederea şi postura controlului de pe HUD îi permite jucătorului să se întoarcă la dreapta ori la stânga, să se uite în sus sau în jos, respectiv să se pună la nivel cu podeaua ori în genunchi. Într-un mod mai practic, aceste comenzi îl fac pe protagonist să se ascundă după un obiect de mobilier, să ia instrumente din mediul înconjurător şi să se strecoare prin pasaje mici. HUD-ul aduce, de asemenea, trei "Display-uri Multi-Funcționale", care pot fi configurate să transmită în joc informații cum ar fi date despre arme, o hartă şi un inventar cu lucruri aflate în posesia personajului principal.</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Pe parcursul jocului, un personaj antagonic numit SHODAN încurcă avansarea jucătorului prin nivele, folosindu-se de capcane şi blocând căi de acces. Calculatoare specifice îi permit protagonistului să intre temporar în Cyber-spațiu; înăuntru, jucătorul se mişcă treptat printr-un spațiu delimitat de figuri geometrice 3D, iar în acest loc trebuie să colecteze date şi să se lupte cu programe de securitate controlate de SHODAN. Acțiunile din Cyber-spațiu cauzează uneori evenimente în lumea fizică a jocului; de exemplu, unele uşi pot fi deschise doar din Cyber-spațiu. În afara acestuia, personajul principal poate folosi 16 arme, dar numai 7 dintre ele pot fi aduse prin nava spațială, acest lucru forțând jucătorul să aleagă în funcție de utilitatea şi caracteristicile fiecăreia. Cu ajutorul armelor, lupta împotriva roboților, cyborg-ilor şi mutanților controlați de maleficul program SHODAN poate fi posibilă.</value>
  </data>
  <data name="richTextBox3.Text" xml:space="preserve">
    <value>System Shock este considerat de mulți unul din jocurile esențiale, ce a schimbat şi inspirat industria de astăzi prin elemente complexe şi diversitate, jocul având inamici, mecanici de joc, respectiv spații, bine-lucrate şi făurite cu pasiune. De asemenea, chiar şi la 24 de ani de la lansare, SHODAN a râmas unul dintre antagoniştii amintiți şi lăudați de fanii genului.</value>
  </data>
</root>