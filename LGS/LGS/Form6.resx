<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Prozaic doar în nume, Oraşul este o himeră arhitectonică. Cetăţi de inspiraţie normandă se ridică alături de edificii în stil victorian, iar străduţe înghesuite, de cătun medieval, conduc la porţi încadrate de colonade clasice. Peste toate se strecoară flacăra încă mocnită a unei revoluţii industriale; radianţa mistică a lampioanelor se împleteşte cu suflul maşinilor cu aburi şi zumzetul generatoarelor electrice. Nu e însă suficient pentru a înlătura senzaţia rece, de sfârşit de toamnă, purtată de vânt peste cerul de noapte. De aceea, interioarele sunt mereu îmbietoare, fie prin larma unor petrecăreţi, prin culorile aprinse de pe o emblemă (stelele şi luna pentru laboratorul alchimistului, săbiile încrucişate pentru fierărie) sau întrezărite printr-o fereastră deschisă. Oraşul nu e numai confluenţa unor epoci, ci şi a dimensiunilor. Aceleaşi străzi care duc la conace fastuoase arată calea spre ruine subterane, spre turnurile magilor sau complexe mortuare ale căror rezidenţi nu şi-au găsit liniştea. </value>
  </data>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>Abilităţile native ale hoţului ţin întru totul de îndemânarea jucătorului. Elementul principal al repertoriului este un giuvaier a cărui brilianţă dă măsura vizibilităţii sale. În funcţie de luminozitatea ambientală, de poziţia asumată (drept sau ghemuit) viteza de deplasare (furişat, mers normal sau fugă) şi eventualul echipament pregătit, giuvaierul indică nuanţe între invizibilitatea totală, o percepţie asupra hoţului ca o vedenie ce nu tulbură veghea unui paznic mai mult de o clipă şi o imagine clară ce îi deconspiră prezenţa. La fel de multă atenţie trebuie abătută şi asupra zgomotului făcut de trecerea sa. Iarba atenuează atât de mult sunetul încât permite mişcări cât se poate de agresive, pe când metalul sau marmura vor ridica tot nivelul în stare de alertă dacă te năpusteşti pe ele ca un ageamiu. Dată fiind natura meseriei sale, Garrett este un tip extrem de agil şi are la dispoziţie o serie întreagă de cascadorii: e capabil să escaladeze ziduri (inclusiv să se agaţe de acoperişuri sau metereze aflate la limita unei sărituri deja riscante), poate amortiza şocul şi sunetul unei căzături de înălţime apreciabilă, cu condiţia să fie ghemuit la începutul execuţiei şi se poate contorsiona în moduri, de ce să nu spunem, bizare anatomiei umane, dar foarte utile pentru când jucătorul doreşte să observe ce se întâmplă după un colţ sau să interacţioneze cu un obiect aflat puţin prea departe.</value>
  </data>
  <data name="richTextBox3.Text" xml:space="preserve">
    <value>Thief: The Dark Project a revoluționat industria prin inovațiile la nivel de mecanici și level-design. Deși mai apăruseră jocuri stealth până în 1998, Thief a fost primul care a adus pe scenă sensibilitatea suprafețelor de teren (metalice, din lemn, cu iarba etc.) prin zgomotul produs de acestea și impactul lor asupra inteligenței artificiale. </value>
  </data>
</root>